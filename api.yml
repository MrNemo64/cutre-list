openapi: 3.0.3
info:
  title: CutreList - MrNemo64
  description: |-
    Api specification for CutreList. **THIS DOCUMENTATION IS MOST LIKELY OUTDATED**
  version: 0.1.0
servers:
  - url: localhost:8080
tags:
  - name: user
    description: Operations about user
  - name: tray
    description: Access to trays and its operations
  - name: task
    description: Access to tasks and its operations
paths:
  ### USER
  /users:
    post:
      tags:
        - user
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserData"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/login:
    post:
      tags:
        - user
      summary: Log in with user credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: User logged in successfully
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Failed to provide valid authentication credentials
  /users/{user_id}:
    get:
      tags:
        - user
      summary: Get user information by ID
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Failed to provide valid authentication credentials
    put:
      tags:
        - user
      summary: Update user information by ID
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserData"
      responses:
        "200":
          description: User information updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Failed to provide valid authentication credentials
    delete:
      tags:
        - user
      summary: Delete user by ID
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User deleted successfully
        "401":
          description: Failed to provide valid authentication credentials
  /users/{user_id}/progress:
    get:
      tags:
        - user
      summary: Get user progress with tasks
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User progress retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProgress"
        "401":
          description: Failed to provide valid authentication credentials

  ### TRAY
  /users/{user_id}/trays:
    get:
      tags:
        - tray
      summary: List all trays for a user
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of trays retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tray"
        "401":
          description: Failed to provide valid authentication credentials
    post:
      tags:
        - tray
      summary: Create a new tray for a user
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrayData"
      responses:
        "201":
          description: Tray created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tray"
        "401":
          description: Failed to provide valid authentication credentials
  /users/{user_id}/trays/{tray_id}:
    get:
      tags:
        - tray
      summary: Get tray information by ID
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: tray_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Tray information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tray"
        "401":
          description: Failed to provide valid authentication credentials
    put:
      tags:
        - tray
      summary: Update tray information by ID
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: tray_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrayData"
      responses:
        "200":
          description: Tray information updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tray"
        "401":
          description: Failed to provide valid authentication credentials
    delete:
      tags:
        - tray
      summary: Delete tray by ID
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: tray_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: deleteAssignedTasks
          in: query
          description: Indicates whether assigned tasks should also be removed, if not specified, tasks are not removed
          schema:
            type: boolean
      responses:
        "200":
          description: Tray deleted successfully
        "401":
          description: Failed to provide valid authentication credentials
  /users/{user_id}/trays/{tray_id}/tasks:
    get:
      tags:
        - tray
      summary: List all tasks in a tray with filters and pagination
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: tray_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Amount of tasks
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskPaginator"
        "401":
          description: Failed to provide valid authentication credentials

  ### TASK
  /users/{user_id}/tasks:
    get:
      tags:
        - task
      summary: List all tasks for a user with pagination
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Amount of tasks
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskPaginator"
        "401":
          description: Failed to provide valid authentication credentials
    post:
      tags:
        - task
      summary: Create a new task for a user
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskData"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "401":
          description: Failed to provide valid authentication credentials
  /users/{user_id}/tasks/{task_id}:
    get:
      tags:
        - task
      summary: Get task information by ID
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Task information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "401":
          description: Failed to provide valid authentication credentials
    put:
      tags:
        - task
      summary: Update task information by ID
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskData"
      responses:
        "200":
          description: Task information updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "401":
          description: Failed to provide valid authentication credentials
    delete:
      tags:
        - task
      summary: Delete task by ID
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: deleteSubTasks
          in: query
          description: Indicates whether sub tasks should also be removed, if not specified, tasks are not removed
          schema:
            type: boolean
      responses:
        "200":
          description: Task deleted successfully
        "401":
          description: Failed to provide valid authentication credentials

  ### SUBTASKS
  /users/{user_id}/tasks/{task_id}/subtasks:
    get:
      tags:
        - task
      summary: List all subtasks with pagination
      security:
        - token: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Amount of tasks
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskPaginator"
        "401":
          description: Failed to provide valid authentication credentials
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: "jrp88"
        email:
          type: string
          format: email
          example: "jrp88@alu.ua.es"
        password:
          type: string
          format: password
        creationTime:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
        - password
        - creationTime
    UserData:
      type: object
      description: Stripped down version of User without the fields determined at creation time for creating and editting users
      properties:
        name:
          type: string
          example: "jrp88"
        email:
          type: string
          format: email
          example: "jrp88@alu.ua.es"
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password
    UserProgress:
      type: object
      properties:
        trays:
          type: array
          items:
            type: object
            properties:
              tray:
                $ref: "#/components/schemas/Tray"
              totalTasks:
                type: integer
              inProgress:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
              done:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
              wontDo:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        general:
          type: object
          properties:
            totalTasks:
              type: integer
            inProgress:
              type: integer
            done:
              type: integer
            wontDo:
              type: integer
    Tray:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: "Inbox"
        description:
          type: string
        creationTime:
          type: string
          format: date-time
      required:
        - id
        - name
        - description
        - creationTime
    TrayData:
      type: object
      description: Stripped down version of Tray without the fields determined at creation time for creating and editting trays
      properties:
        name:
          type: string
          example: "Inbox"
        description:
          type: string
      required:
        - name
        - description
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        state:
          type: string
          enum:
            - IN_PROGRESS
            - DONE
            - WONT_DO
          default: IN_PROGRESS
        priority:
          type: string
          enum:
            - NONE
            - LOW
            - MEDIUM
            - HIGH
          default: NONE
        creationTime:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
          description: "The earliest date and time at which this task can be completed"
        deadLine:
          type: string
          format: date-time
          description: "The lattest date and time at which this task can be completed in time"
        completionDate:
          type: string
          format: date-time
          description: "Date and time at which this task was marked as completed"
        parentTask:
          type: integer
          format: int64
      required:
        - id
        - title
        - description
        - state
        - priority
        - creationTime
    TaskData:
      type: object
      description: Stripped down version of Task without the fields determined at creation time for creating and editting tasks
      properties:
        title:
          type: string
        description:
          type: string
        state:
          type: string
          enum:
            - IN_PROGRESS
            - DONE
            - WONT_DO
          default: IN_PROGRESS
        priority:
          type: string
          enum:
            - NONE
            - LOW
            - MEDIUM
            - HIGH
          default: NONE
        startDate:
          type: string
          format: date-time
          description: "The earliest date and time at which this task can be completed"
        deadLine:
          type: string
          format: date-time
          description: "The lattest date and time at which this task can be completed in time"
        completionDate:
          type: string
          format: date-time
          description: "Date and time at which this task was marked as completed"
        parentTask:
          type: integer
          format: int64
      required:
        - id
        - title
        - description
        - state
        - priority
        - creationTime
    TaskPaginator:
      type: object
      description: "Paginated view of a list of tasks"
      properties:
        total:
          type: integer
          description: Total amount of available tasks
          example: 1
        page:
          type: integer
          description: Returned page index for the given request size
          example: 0
        returned:
          type: integer
          description: Amount of tasks returned
          example: 1
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT
